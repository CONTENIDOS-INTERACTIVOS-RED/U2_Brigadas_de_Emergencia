{"remainingRequest":"/home/runner/work/U2_Brigadas_de_Emergencia/U2_Brigadas_de_Emergencia/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Brigadas_de_Emergencia/U2_Brigadas_de_Emergencia/src/views/curso/Tema1.vue?vue&type=template&id=df0821ee&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Brigadas_de_Emergencia/U2_Brigadas_de_Emergencia/src/views/curso/Tema1.vue","mtime":1740290419695},{"path":"/home/runner/work/U2_Brigadas_de_Emergencia/U2_Brigadas_de_Emergencia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Brigadas_de_Emergencia/U2_Brigadas_de_Emergencia/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Brigadas_de_Emergencia/U2_Brigadas_de_Emergencia/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Brigadas_de_Emergencia/U2_Brigadas_de_Emergencia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Brigadas_de_Emergencia/U2_Brigadas_de_Emergencia/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}